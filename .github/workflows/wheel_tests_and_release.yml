name: Build Wheels and Release
on:
  push:
    tags:
      - 'v*'
      - 'buildwheels*'
env:
  CIBW_BUILD_VERBOSITY: 2
  CIBW_TEST_REQUIRES: "-r requirements/test.txt"
  CIBW_TEST_COMMAND: pytest --pyargs skimage
  CIBW_ENVIRONMENT: PIP_PREFER_BINARY=1


permissions:
  contents: read

jobs:
  build_linux_37_and_above_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        cibw_python: [ "cp38-*", "cp39-*"]
        cibw_manylinux: [ manylinux2014 ]
        cibw_arch: [ "x86_64", "i686" ]
        include:
          - os: ubuntu-18.04
            cibw_python: "cp310-*"
            cibw_manylinux: manylinux2014
            cibw_arch: x86_64
            # exclude i686 on Python 3.10 (No NumPy or SciPy wheels available)
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.9'
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build the wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_SKIP: "*-musllinux_*"
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_ENVIRONMENT_PASS_LINUX: SKIMAGE_LINK_FLAGS
          SKIMAGE_LINK_FLAGS: "-Wl,--strip-debug"
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  build_linux_aarch64_wheels:
    name: Build python ${{ matrix.cibw_python }} aarch64 wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04]
        cibw_python: [ "cp38-*" , "cp39-*" , "cp310-*" ]
        cibw_manylinux: [ manylinux2014 ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.9'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel
      - name: Build the wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_SKIP: "*-musllinux_*"
          # skip aarch64 tests which often exceed the 6 hour time limit
          CIBW_TEST_SKIP: "*_aarch64"
          CIBW_ARCHS_LINUX: aarch64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.cibw_manylinux }}
          CIBW_ENVIRONMENT_PASS_LINUX: SKIMAGE_LINK_FLAGS
          SKIMAGE_LINK_FLAGS: "-Wl,--strip-debug"
      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  build_macos_wheels:
    name: Build python ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cibw_python: [ "cp38-*", "cp39-*", "cp310-*" ]
        # TODO: add "universal2" once a universal2 libomp is available
        cibw_arch: [ "x86_64", "arm64"]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels for CPython Mac OS
        run: |
          # Make sure to use a libomp version binary compatible with the oldest
          # supported version of the macos SDK as libomp will be vendored into
          # the scikit-image wheels for macos. The list of binaries are in
          # https://packages.macports.org/libomp/.  Currently, the oldest
          # supported macos version is: High Sierra / 10.13. When upgrading
          # this, be sure to update the MACOSX_DEPLOYMENT_TARGET environment
          # variable accordingly. Note that Darwin_17 == High Sierra / 10.13.
          if [[ "$CIBW_ARCHS_MACOS" == arm64 ]]; then
              # SciPy requires 12.0 on arm to prevent kernel panics
              # https://github.com/scipy/scipy/issues/14688
              # so being conservative, we just do the same here
              export MACOSX_DEPLOYMENT_TARGET=12.0
              OPENMP_URL="https://anaconda.org/conda-forge/llvm-openmp/11.1.0/download/osx-arm64/llvm-openmp-11.1.0-hf3c4609_1.tar.bz2"
          else
              export MACOSX_DEPLOYMENT_TARGET=10.13
              OPENMP_URL="https://anaconda.org/conda-forge/llvm-openmp/11.1.0/download/osx-64/llvm-openmp-11.1.0-hda6cdc1_1.tar.bz2"
          fi
          echo MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}

          # use conda to install llvm-openmp
          # Note that we do NOT activate the conda environment, we just add the
          # library install path to CFLAGS/CXXFLAGS/LDFLAGS below.
          sudo conda create -n build $OPENMP_URL
          PREFIX="/usr/local/miniconda/envs/build"
          export CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          export CPPFLAGS="$CPPFLAGS -Xpreprocessor -fopenmp"
          export CFLAGS="$CFLAGS -Wno-implicit-function-declaration -I$PREFIX/include"
          export CXXFLAGS="$CXXFLAGS -I$PREFIX/include"
          export LDFLAGS="$LDFLAGS -Wl,-S -Wl,-rpath,$PREFIX/lib -L$PREFIX/lib -lomp"

          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          CIBW_TEST_SKIP: "*-macosx_arm64"

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  build_windows_wheels:
    name: Build ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        cibw_arch: ["AMD64", "x86"]
        cibw_python: ["cp38-*", "cp39-*", "cp310-*"]
        exclude:
          - os: windows-latest
            cibw_python: "cp310-*"
            cibw_arch: x86

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.9'

      # install choco package manager
      - uses: crazy-max/ghaction-chocolatey@v1
        name: Install chocolatey
        with:
          args: -h

      # install x86 clang-cl (needed for Pythran)
      - name: Install x86 clang-cl
        if: matrix.cibw_arch == 'x86'
        run: |
          choco install --force --x86 llvm

      - name: Install x64 clang-cl
        if: matrix.cibw_arch == 'AMD64'
        run: |
          choco install --force llvm

      - name: Install cibuildwheel and add clang-cl to path
        run: |
          python -m pip install cibuildwheel
          SET PATH="C:\\Program Files\\LLVM\\bin;%PATH%"
          SET PATH="C:\\Program Files (x86)\\LLVM\\bin;%PATH%"

      - name: Build x86 Windows wheels for CPython
        if: matrix.cibw_arch == 'x86'
        # To avoid "LINK : fatal error LNK1158: cannot run 'rc.exe'"
        # we explicitly add rc.exe to path using the method from:
        # https://github.com/actions/virtual-environments/issues/294#issuecomment-588090582
        # with additional -arch=x86 flag to vsdevcmd.bat
        run: |
          function Invoke-VSDevEnvironment {
            $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
              $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
            & "${env:COMSPEC}" /s /c "`"$Command`" -arch=x86 -no_logo && set" | Foreach-Object {
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }
          }
          Invoke-VSDevEnvironment
          Get-Command rc.exe | Format-Table -AutoSize
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_arch }}
          # -Wl,-S equivalent to gcc's -Wl,--strip-debug
          LDFLAGS: "-Wl,-S"

      - name: Build x64 Windows wheels for CPython
        if: matrix.cibw_arch == 'AMD64'
        # To avoid "LINK : fatal error LNK1158: cannot run 'rc.exe'"
        # we explicitly add rc.exe to path using the method from:
        # https://github.com/actions/virtual-environments/issues/294#issuecomment-588090582
        # with additional -arch=x86 flag to vsdevcmd.bat
        run: |
          function Invoke-VSDevEnvironment {
            $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
              $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
            & "${env:COMSPEC}" /s /c "`"$Command`" -arch=amd64 -no_logo && set" | Foreach-Object {
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }
          }
          Invoke-VSDevEnvironment
          Get-Command rc.exe | Format-Table -AutoSize
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_arch }}
          # -Wl,-S equivalent to gcc's -Wl,--strip-debug
          LDFLAGS: "-Wl,-S"

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dist/*.whl

  deploy:
    permissions:
      contents: write  # for softprops/action-gh-release to create GitHub release
    name: Release
    needs: [build_linux_37_and_above_wheels, build_linux_aarch64_wheels, build_macos_wheels, build_windows_wheels]
    if: github.repository_owner == 'scikit-image' && startsWith(github.ref, 'refs/tags/v') && always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v3
        name: Install Python
        with:
          python-version: '3.9'

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/build.txt
          pip install twine

      - uses: actions/download-artifact@v3
        id: download
        with:
          name: wheels
          path: ./dist
    
      - name: Publish the source distribution on PyPI
        run: |
          SK_VERSION=$(git describe --tags)
          python setup.py sdist
          ls -la ${{ github.workspace }}/dist
          # We prefer to release wheels before source because otherwise there is a
          # small window during which users who pip install scikit-image will require compilation.
          twine upload ${{ github.workspace }}/dist/*.whl
          twine upload ${{ github.workspace }}/dist/scikit-image-${SK_VERSION:1}.tar.gz
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
              
      - name: Github release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
